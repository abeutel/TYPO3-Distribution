<?php
declare(strict_types=1);
namespace Helhum\Typo3ConfigHandling\Command;

/***************************************************************
 *  Copyright notice
 *
 *  (c) 2017 Helmut Hummel <info@helhum.io>
 *  All rights reserved
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *  A copy is found in the text file GPL.txt and important notices to the license
 *  from the author is found in LICENSE.txt distributed with these scripts.
 *
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

use Helhum\ConfigLoader\Reader\RootConfigFileReader;
use Helhum\TYPO3\ConfigHandling\ConfigCleaner;
use Helhum\TYPO3\ConfigHandling\ConfigDumper;
use Helhum\TYPO3\ConfigHandling\ConfigLoader;
use Helhum\TYPO3\ConfigHandling\RootConfig;
use Helhum\Typo3Console\Mvc\Cli\CommandDispatcher;
use Helhum\Typo3Console\Mvc\Controller\CommandController;
use TYPO3\CMS\Core\Configuration\ConfigurationManager;
use TYPO3\CMS\Core\Utility\ArrayUtility;
use TYPO3\CMS\Core\Utility\GeneralUtility;

class SettingsCommandController extends CommandController
{
    /**
     * @var ConfigurationManager
     */
    private $configurationManager;

    /**
     * @var string
     */
    private $localConfigurationFile;

    /**
     * @var string
     */
    private $additionalConfigurationFile;

    /**
     * @var ConfigDumper
     */
    private $configDumper;

    /**
     * @var ConfigCleaner
     */
    private $configCleaner;

    public function __construct(ConfigurationManager $configurationManager = null, ConfigDumper $configDumper = null, ConfigCleaner $configCleaner)
    {
        $configurationManager = $configurationManager ?: new ConfigurationManager();
        $this->localConfigurationFile = $configurationManager->getLocalConfigurationFileLocation();
        $this->additionalConfigurationFile = $configurationManager->getAdditionalConfigurationFileLocation();
        $this->configurationManager = $configurationManager;
        $this->configDumper = $configDumper ?: new ConfigDumper();
        $this->configCleaner = $configCleaner ?: new ConfigCleaner();
    }

    /**
     * Dump a (static) LocalConfiguration.php file
     *
     * The values are complied to respect all settings managed by the configuration loader.
     *
     * @param bool $noDev When set, only LocalConfiguration.php is written to contain the merged configuration ready for production
     */
    public function dumpCommand($noDev = false)
    {
        if (file_exists($this->localConfigurationFile) && !$this->isAutoGenerated($this->localConfigurationFile)) {
            CommandDispatcher::createFromCommandRun()->executeCommand('settings:extract');
        }
        if ($noDev) {
            if ($this->isAutoGenerated($this->additionalConfigurationFile)) {
                unlink($this->additionalConfigurationFile);
            }
            $configLoader = new ConfigLoader(RootConfig::getRootConfigFile($noDev));
            $this->dumpLocalConf($configLoader->load());
        } else {
            file_put_contents(
                $this->additionalConfigurationFile,
                '<?php'
                . chr(10)
                . '// Auto generated by helhum/typo3-config-handling'
                . chr(10)
                . '// Do not edit this file'
                . chr(10)
                . RootConfig::getInitConfigFileContent()
            );
            $this->dumpLocalConf([]);
        }
    }

    /**
     * @param string $mainConfigFile
     * @param string $extensionConfigFile
     */
    public function extractCommand(string $mainConfigFile = 'conf/config.yml', string $extensionConfigFile = 'conf/config.extension.yml')
    {
        if (!file_exists($this->localConfigurationFile)) {
            $this->outputLine('<warning>LocalConfiguration.php does not exist. Nothing to extract</warning>');
            return;
        }
        if ($this->isAutoGenerated($this->localConfigurationFile)) {
            $this->outputLine('<info>LocalConfiguration.php is already generated. Nothing to extract.</info>');
            return;
        }

        $this->extractExtensionConfig($extensionConfigFile);
        $this->extractMainConfig($mainConfigFile);
    }

    private function dumpLocalConf(array $config) {
        $this->configDumper->dumpToFile(
            $config,
            $this->localConfigurationFile,
            "Auto generated by helhum/typo3-config-handling\nDo not edit this file"
        );
    }

    private function extractExtensionConfig(string $extensionConfigFile)
    {
        if ($extensionConfig = $this->getExtensionConfig($extensionConfigFile)) {
            $extensionConfigFile = getenv('TYPO3_PATH_COMPOSER_ROOT') . '/' . $extensionConfigFile;
            $this->configDumper->dumpToFile($extensionConfig, $extensionConfigFile);
            $this->outputLine('<info>Extracted extension settings to %s</info>', [$extensionConfigFile]);
        } else {
            $this->outputLine('<warning>No extension settings were found</warning>');
        }
    }

    private function extractMainConfig(string $mainConfigFile)
    {
        $mainConfigFile = getenv('TYPO3_PATH_COMPOSER_ROOT') . '/' . $mainConfigFile;
        $this->configDumper->dumpToFile($this->getMainConfig($mainConfigFile), $mainConfigFile);
        $this->outputLine('<info>Extracted settings to %s</info>', [$mainConfigFile]);
    }

    private function getExtensionConfig(string $extensionConfigFile): array
    {
        $extensionConfigFile = getenv('TYPO3_PATH_COMPOSER_ROOT') . '/' . $extensionConfigFile;
        $extensionConfig = [];
        try {
            foreach ($this->configurationManager->getLocalConfigurationValueByPath('EXT/extConf') as $extensionKey => $typo3ExtSettings) {
                $extensionConfig['EXT']['extConf'][$extensionKey] = GeneralUtility::removeDotsFromTS(unserialize($typo3ExtSettings, [false]));
            }
        } catch (\RuntimeException $e) {
        }
        $currentConfig = [];
        if (file_exists($extensionConfigFile)) {
            $currentConfig = (new RootConfigFileReader($extensionConfigFile, null, false))->readConfig();
        }
        return $this->configCleaner->cleanConfig(
            array_replace_recursive($currentConfig, $extensionConfig),
            []
        );
    }

    private function getMainConfig(string $mainConfigFile): array
    {
        $mainConfig = $this->configCleaner->cleanConfig(
            $this->configurationManager->getLocalConfiguration(),
            (new ConfigLoader(RootConfig::getRootConfigFile()))->load()
        );
        $currentConfig = [];
        if (file_exists($mainConfigFile)) {
            $currentConfig = (new RootConfigFileReader($mainConfigFile, null, false))->readConfig();
        }
        return $this->configCleaner->cleanConfig(
            array_replace_recursive($currentConfig, $mainConfig),
            $this->configurationManager->getDefaultConfiguration()
        );
    }

    private function isAutoGenerated(string $file): bool
    {
        if (!file_exists($file)) {
            return false;
        }
        return false !== strpos(file_get_contents($file), 'Auto generated by helhum/typo3-config-handling');
    }
}
